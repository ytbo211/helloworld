package tool.binary;

/**位运算
 * 运算符：&	与运算	6&3=2
 * 		 |	或运算	6|3=7
 * 		 ^	异或运算	6^3=5
 * 		 ~	反码		~6=-7
 * 		 <<	左移		3<<2=12	3*2*2
 * 		 >>	右移		3>>2=1	3/2=1
 * 		 >>>无符号右移	3>>>1=1	3/2=1
 * 优点：特定情况下，计算方便，速度快，被支持面广
 * 	         如果用算数方法，速度慢，逻辑复杂（单片机下不一定支持）
 * @author Administrator
 *
 */
public class BitOperation {

	public static void main(String[] args) {
		//&	与运算	6&3=2
		//两位全为1，结果才为1 0&0=0; 0&1=0;1&0=0;1&1=1
		//特殊用法：	1清零。如果想将一个单元清零，即使其全部二进制位为0，只要与一个各位都是0的数值相与，结果为0
		//		  	2取一个数中指定位 设x=10101110，取x的低4位，用x&0000 1111=0000 1110
		int a=3;
		System.out.println(a&0);
		a=127;
		System.out.println(a&00001111);

		//|	或运算	6|3=7
		//只要有一个为1，结果为1 0|0=0; 0&1=1;1&0=1;1&1=1
		//特殊用法：	1用来对一个数据的某些位置1 讲x=10101110，用x|00001111=10101111
		int b=9;//1001|100
		System.out.println(b|6);
		
		//^ 异或运算
		//两个相应位为异，则该位为1，否则为0 0^0=0 0^1=1 1^0=1 1^1=0
		//特殊用法：	1.使特定位翻转 x=10101110 使x低4位翻转，用x^0000 1111=10100001
		//			2.与0相异或，保留原值
		//			3.值交换 1借助第三变量	C=A;A=B;B=C
		//				   2利用加减实现       A=A+B;B=A-B;A=A-B
		//				   3用位异或		A=A^B;B=A^B;A=A^B
	}

}
